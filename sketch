#include <SPI.h>

#define RESOLUTION 16

#define SCALE_FACTOR 0.000152587890625

//pins for shield
#define BUSY 3
#define RESET 4
#define START_CONVERSION 5
#define SHcs 10

#define TOTAL_RAW_BYTES RESOLUTION

//variable shared in interrupt routine
volatile boolean flag = false;

int bytesToRead = TOTAL_RAW_BYTES;
byte raw[TOTAL_RAW_BYTES];
signed long parsed[8];

int i;
int count = 0;

void setup() {
  pinMode(BUSY, INPUT);
  pinMode(RESET, OUTPUT);
  pinMode(START_CONVERSION, OUTPUT);
  pinMode(SHcs, OUTPUT);
  
  SPI.begin();
  Serial.begin(115200);
  
  digitalWrite(START_CONVERSION, HIGH);
  digitalWrite(SHcs, HIGH);
  digitalWrite(RESET, HIGH);
  delay(1);
  digitalWrite(RESET, LOW);
  
  attachInterrupt(0, pulse, FALLING);
}

void pulse(){
  flag = true;
}

void loop() {
  if (flag == true) {
    detachInterrupt(0); //detach interrupt
    digitalWrite(START_CONVERSION, LOW);
    delayMicroseconds(10);
    digitalWrite(START_CONVERSION, HIGH);
    while (digitalRead(BUSY) == HIGH) {}
    digitalWrite(SHcs, LOW);
    while (bytesToRead > 0) {
      raw[TOTAL_RAW_BYTES - bytesToRead] = SPI.transfer(0x00);
      bytesToRead--;
    }
    digitalWrite(SHcs, HIGH);
    bytesToRead = TOTAL_RAW_BYTES;
    parsed[0] = (raw[0] << 8) + (raw[1] >> 0);
    parsed[1] = (raw[2] << 8) + (raw[3] >> 0);
    parsed[2] = (raw[4] << 8) + (raw[5] >> 0);
    parsed[3] = (raw[6] << 8) + (raw[7] >> 0);
    parsed[4] = (raw[8] << 8) + (raw[9] >> 0);
    parsed[5] = (raw[10] << 8) + (raw[11] >> 0);
    parsed[6] = (raw[12] << 8) + (raw[13] >> 0);
    parsed[7] = (raw[14] << 8) + (raw[15] >> 0);
    for (i=0; i<8; i++) {
      if(parsed[i] & 0x8000) { // if reading is < 0 (stored as two's complement)
        parsed[i] = parsed[i] | 0xFFFF0000; //set bits 31-16
      } else {
        parsed[i] = parsed[i];
      }
    }
    
    Serial.print(count);
    Serial.print(",");
    Serial.print((float)parsed[1] * SCALE_FACTOR * 1000, 5);
    Serial.print(",");
    Serial.print((float)parsed[2] * SCALE_FACTOR * 1000, 5);
    Serial.print(",");
    Serial.print((float)parsed[3] * SCALE_FACTOR * 1000, 5);
    Serial.print(",");
    Serial.print((float)parsed[4] * SCALE_FACTOR * 1000, 5);
    Serial.print(",");
    Serial.print((float)parsed[5] * SCALE_FACTOR * 1000, 5);
    Serial.print(",");
    Serial.println((float)parsed[6] * SCALE_FACTOR * 1000, 5);
    
    count = count + 1;
    flag = false;
    attachInterrupt(0, pulse, FALLING); //reattach the interrupt
  }
}
